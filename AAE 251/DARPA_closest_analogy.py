# -*- coding: utf-8 -*-
"""
Created on Sat Dec  3 16:04:33 2016

@author: jordan
"""

def DARPA_closest_analogy(Isp_list, m0_list, m0_lb, Isp):
    Isp_diff_list = []
    m0_diff_list = []
    total_diff_list = []
    for x in Isp_list:
        Isp_diff_list.append(abs(Isp-x))
    for x in m0_list:
        m0_diff_list.append(abs(m0_lb-x))
    for i in range(0, len(m0_diff_list)):
        total_diff_list.append(m0_diff_list[i]/m0_list[i] + Isp_diff_list[i]/Isp_list[i])
    closest_m0 = m0_list[total_diff_list.index(min(total_diff_list))]
    closest_Isp = Isp_list[total_diff_list.index(min(total_diff_list))]    
    
    #print(closest_m0, closest_Isp)
    return closest_m0  
    
def DARPA_closest_test():
    Isp_list = [284, 293, 204, 302, 286, 302, 291, 434, 319, 316, 337, 327, 303, 
                337,431, 327, 265, 289, 315, 451, 359, 319, 304, 292, 409, 294, 
                284,321, 321, 423, 427, 320, 310, 444, 466, 446, 278, 319, 265, 
                326,275, 331, 293, 297, 326, 259, 255, 231, 273, 247, 227, 281, 
                239, 282, 249, 230]
    m_pay_list = [71851, 1800, 10946, 27237, 48890, 241390, 49190, 68745, 90731,
                  529092, 76516, 159122, 4800, 19644, 68124, 48330, 8667, 8895,
                  8650, 20000, 29542, 31405, 1418800, 6479, 1100000, 310208,
                  68785, 44093, 44093, 89800, 35200, 940, 3968, 10200, 44093,
                  44093, 213, 6165, 1115, 6415, 98592, 11023, 330, 3090, 5974,
                  12842.9, 1521, 528, 3478.2, 2178, 200, 734.2, 2150, 100,
                  6305, 25]         #payload mass data, lbs
    m0_list = [328097, 264364, 74252, 251657, 220140, 466041, 241390, 469986, 
               303796, 1521193, 748554, 529092, 49190, 334591, 446216, 
               159122, 39757, 26167, 71581, 69794, 90731, 126079, 6257000,
               11366, 11731893, 1320160, 28285980, 68785, 68124, 353200,
               1417900, 10946, 48890, 41539, 106609, 81542, 1015, 21493, 8697,
               57276, 709272, 24912, 3428, 14639, 19644, 36325.1, 11794, 10758, 
               12842.9, 12924, 1562, 3478.2, 27572, 734.2, 61207, 681]            #initial mass data, lbs
    f_inert_list = [.038, .053, .056, .056, .056, .060, .060, .066, .068, .068,
                    .068, .070, .071, .072, .073, .073, .076, .078, .080, .085,
                    .085, .088, .093, .094, .096, .099, .104, .107, .110, .111,
                    .112, .112, .115, .118, .118, .123, .135, .136, .140, .142,
                    .144, .151, .160, .160, .177, .191, .205, .215, .218, .226,
                    .225, .241, .246, .281, .322, .451]       #inert mass fraction data
                    
    m0_lb = 25000
    Isp = 353
    
    closest_m0 = closest_analogy(Isp_list, m0_list, m0_lb, Isp)
    return

if __name__ == '__main__':
    closest_test(*[float(val) for val in sys.argv[1:]])